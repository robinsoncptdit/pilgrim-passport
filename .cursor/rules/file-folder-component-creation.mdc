---
description: When creating or modifying files, folders and or components
globs: src/**/*
alwaysApply: false
---
Follow these instructions general instructions when creating directories, files and or components in nextjs

- Use 'use client' directive for client-side components
- Use Tailwind CSS utility classes for breakpoints and responsiveness
- Use shadcn components where possible for design and style

## Recommended File Structure
- Stick to best practice file and folder structure

<file structure example>
src/
├── app/
│   ├── layout.tsx
│   ├── page.tsx
│   └── dashboard/
│       ├── page.tsx
│       ├── layout.tsx
│       └── _components/
│           └── DashboardChart.tsx
├── ui/               # Base Shadcn components (generic)
│   ├── Button.tsx
│   ├── Card.tsx
│   ├── Input.tsx
│   └── Modal.tsx
├── components/       # Composed reusable components
│   ├── Navbar.tsx
│   ├── Footer.tsx
│   └── FormField.tsx
├── features/         # Feature-specific components and logic
│   ├── blog/
│   │   ├── BlogCard.tsx
│   │   |── BlogList.tsx
│   └── dashboard/
│       ├── DashboardHeader.tsx
│       └── DashboardSidebar.tsx
├── public/           # Static assets (images, fonts)
├── styles/           # Global CSS or Tailwind configuration files
└── next.config.js    # Next.js configuration file
</file structure example>

---

## Additional Clarifications

### 1. "use client" Usage
- **Purpose**: Only add `"use client"` to the top of a file if the component uses client-side features (e.g., React hooks like `useState`, `useEffect`, or event handlers).
- **Server vs. Client**: If your component doesn’t need interactivity, you can make it a server component (no directive needed), which can improve performance.

### 2. Tailwind Configuration & Next.js Versions
- Keep your Tailwind configuration (`tailwind.config.js`) aligned with the directory structure used in Next.js 13 or higher. Make sure `content` paths include any new `app/` or `src/` directories:
 <jsexample>
  // Example tailwind.config.js
  module.exports = {
    content: [
      './app/**/*.{js,ts,jsx,tsx}',
      './pages/**/*.{js,ts,jsx,tsx}',
      './components/**/*.{js,ts,jsx,tsx}',
      // etc.
    ],
    theme: {
      extend: {},
    },
    plugins: [],
  };
  </jsexample>

  ### 3. Simple Example of Using shadcn Components
  If you install shadcn UI library, you can quickly import pre-styled components for faster development. For instance:
  <tsxexample>
  "use client"
import { Button } from "@/ui/button";

export default function ExampleButton() {
  return (
    <Button>
      Click Me
    </Button>
  );
}
</tsxexample>
Replace @/ui/button with your actual location of the Button component after running npx shadcn@latest init or similar commands.
Tailor the Button with Tailwind utility classes if needed for variant styling.

